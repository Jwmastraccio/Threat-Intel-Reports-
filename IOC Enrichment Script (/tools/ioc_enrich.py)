#!/usr/bin/env python3
"""
IOC enrichment helper

What this does
- Reads IOCs from IOCs.csv
- Hits VirusTotal and AlienVault OTX to pull basic enrichment fields
- Writes results to IOCs_enriched.csv

Notes
- You need to add your API keys below.
- Install dependencies with: pip install requests
- This is meant to be easy to run locally for quick context about IOCs.
"""

import csv
import requests
import time
import sys

# ---------- config ----------
INPUT_FILE = "IOCs.csv"
OUTPUT_FILE = "IOCs_enriched.csv"

# Put your API keys here (replace the placeholders)
VT_API_KEY = "YOUR_VIRUSTOTAL_API_KEY"
OTX_API_KEY = "YOUR_ALIENVAULT_OTX_API_KEY"

VT_URL = "https://www.virustotal.com/api/v3"
OTX_URL = "https://otx.alienvault.com/api/v1/indicators"
# ----------------------------

def vt_enrich(ioc_type, ioc):
    """Basic VirusTotal enrichment. Returns a dict (may be empty)."""
    headers = {"x-apikey": VT_API_KEY}
    endpoints = {
        "Domain": f"/domains/{ioc}",
        "IPv4": f"/ip_addresses/{ioc}",
        "FileHash-MD5": f"/files/{ioc}",
        "FileHash-SHA1": f"/files/{ioc}",
        "FileHash-SHA256": f"/files/{ioc}",
    }

    if ioc_type not in endpoints:
        return {}

    try:
        r = requests.get(VT_URL + endpoints[ioc_type], headers=headers, timeout=15)
        if r.status_code != 200:
            return {}
        data = r.json().get("data", {}).get("attributes", {})
        stats = data.get("last_analysis_stats", {})
        fam = data.get("popular_threat_classification", {}).get("suggested_threat_label", "N/A")
        return {
            "vt_harmless": stats.get("harmless", 0),
            "vt_malicious": stats.get("malicious", 0),
            "vt_suspicious": stats.get("suspicious", 0),
            "vt_family": fam
        }
    except Exception:
        return {}

def otx_enrich(ioc_type, ioc):
    """Basic AlienVault OTX enrichment. Returns a dict (may be empty)."""
    headers = {"X-OTX-API-KEY": OTX_API_KEY}
    endpoints = {
        "Domain": f"/domain/{ioc}/general",
        "IPv4": f"/IPv4/{ioc}/general",
        "FileHash-MD5": f"/file/{ioc}/general",
        "FileHash-SHA1": f"/file/{ioc}/general",
        "FileHash-SHA256": f"/file/{ioc}/general",
    }

    if ioc_type not in endpoints:
        return {}

    try:
        r = requests.get(OTX_URL + endpoints[ioc_type], headers=headers, timeout=15)
        if r.status_code != 200:
            return {}
        data = r.json()
        pulses = data.get("pulse_info", {}).get("pulses", [])
        base = data.get("base_indicator", {}) or {}
        return {
            "otx_pulse_count": len(pulses),
            "otx_first_seen": base.get("created", "N/A"),
            "otx_tags": ",".join(base.get("tags", []))
        }
    except Exception:
        return {}

def enrich():
    rows = []
    try:
        with open(INPUT_FILE, newline="") as f:
            reader = csv.DictReader(f)
            for r in reader:
                ioc_type = r.get("Type")
                ioc_value = r.get("Value")
                if not (ioc_type and ioc_value):
                    continue

                vt = vt_enrich(ioc_type, ioc_value)
                otx = otx_enrich(ioc_type, ioc_value)

                merged = {**r, **vt, **otx}
                rows.append(merged)

                print(f"Enriched: {ioc_type} {ioc_value}")
                time.sleep(1)  # simple rate-limit friendly pause
    except FileNotFoundError:
        print(f"Could not find {INPUT_FILE}. Put your CSV in the repo root or update INPUT_FILE.")
        sys.exit(1)

    if not rows:
        print("No IOCs processed. Exiting.")
        sys.exit(0)

    with open(OUTPUT_FILE, "w", newline="") as f:
        writer = csv.DictWriter(f, fieldnames=rows[0].keys())
        writer.writeheader()
        writer.writerows(rows)

    print(f"Done â€” results in {OUTPUT_FILE}")

if __name__ == "__main__":
    if VT_API_KEY.startswith("YOUR_") or OTX_API_KEY.startswith("YOUR_"):
        print("Please edit this script and add your VirusTotal and AlienVault OTX API keys.")
        sys.exit(1)
    enrich()
